---
import "./glow-effect/glow-effect.css";

type GlowColor =
  | "white"
  | "red"
  | "blue"
  | "green"
  | "yellow"
  | "orange"
  | "purple"
  | "cyan";

type GlowBorderRadius =
  | "none"
  | "sm"
  | "md"
  | "lg"
  | "xl"
  | "xll"
  | "xlll"
  | "full";

interface Props {
  color?: GlowColor;
  radius?: GlowBorderRadius;
}

const { color = "white", radius = "xl" } = Astro.props;
---

<!-- HTML -->
<div class:list={["glow-container", color, radius]}>
  <div class="glows"></div>

  <div class="h-full *:h-full">
    <slot />
  </div>
</div>

<!-- JS -->
<script>
  // -------------------- GLOW EFFECT --------------------
  const GLOW_CONTAINERS = document.querySelectorAll(
    ".glow-container",
  ) as NodeListOf<HTMLElement>;

  const CONFIG = {
    proximity: 40,
    spread: 80,
    blur: 20,
    gap: 32,
    vertical: false,
    opacity: 0,
  };

  const UPDATE = (event: MouseEvent) => {
    // get the angle based on the center point of the card and pointer position
    // Check the card against the proximity and then start updating
    for (const glowContainer of GLOW_CONTAINERS) {
      const containerBounds = glowContainer.getBoundingClientRect();
      // Get distance between pointer and outerbounds of card
      if (
        event?.x > containerBounds.left - CONFIG.proximity &&
        event?.x <
          containerBounds.left + containerBounds.width + CONFIG.proximity &&
        event?.y > containerBounds.top - CONFIG.proximity &&
        event?.y <
          containerBounds.top + containerBounds.height + CONFIG.proximity
      ) {
        // If within proximity set the active opacity
        glowContainer.style.setProperty("--active", "1");
      } else {
        glowContainer.style.setProperty("--active", CONFIG.opacity + "");
      }
      const CARD_CENTER = [
        containerBounds.left + containerBounds.width * 0.5,
        containerBounds.top + containerBounds.height * 0.5,
      ];
      let ANGLE =
        (Math.atan2(event?.y - CARD_CENTER[1], event?.x - CARD_CENTER[0]) *
          180) /
        Math.PI;
      ANGLE = ANGLE < 0 ? ANGLE + 360 : ANGLE;
      glowContainer.style.setProperty("--start", ANGLE + 90 + "");
    }
  };

  function updateGlowContainers() {
    if (!("ontouchstart" in window)) {
      document.body.addEventListener("mousemove", UPDATE);

      // @ts-expect-error que ladilla
      UPDATE();
    }
  }

  updateGlowContainers();

  // -------------------- DARK MODE --------------------
  const htmlElement = document.documentElement;

  function changeGlowContainersTheme(isDarkMode: boolean) {
    GLOW_CONTAINERS.forEach((glowContainer) => {
      glowContainer.classList.toggle("glow-container", isDarkMode);
      glowContainer.classList.toggle("white-border", !isDarkMode);
    });
  }

  const isDarkMode = htmlElement.classList.contains("dark");
  changeGlowContainersTheme(isDarkMode);

  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === "attributes") {
        const isDarkMode = htmlElement.classList.contains("dark");
        GLOW_CONTAINERS.forEach((glowContainer) => {
          glowContainer.classList.toggle("glow-container", isDarkMode);
          glowContainer.classList.toggle("white-border", !isDarkMode);
        });
        if (isDarkMode) updateGlowContainers();
      }
    });
  });

  observer.observe(htmlElement, { attributes: true });
</script>
