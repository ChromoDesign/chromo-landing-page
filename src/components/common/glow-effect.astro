---
type GlowColor =
  | "white"
  | "red"
  | "blue"
  | "green"
  | "yellow"
  | "orange"
  | "purple"
  | "cyan";

type GlowBorderRadius =
  | "none"
  | "sm"
  | "md"
  | "lg"
  | "xl"
  | "xll"
  | "xlll"
  | "full";

interface Props {
  color?: GlowColor;
  radius?: GlowBorderRadius;
}

const { color = "white", radius = "xl" } = Astro.props;
---

<!-- HTML -->
<div class:list={["glow-container", color, radius]}>
  <div class="glows"></div>

  <slot />
</div>

<!-- CSS -->
<style>
  :root {
    --spread: 40;
    --border: hsl(281, 10%, 50%);
    --border-width: 2px;
    --border-radius: theme(borderRadius.xl);
  }

  .none {
    --border-radius: 0;
  }

  .sm {
    --border-radius: theme(borderRadius.sm);
  }

  .md {
    --border-radius: theme(borderRadius.md);
  }

  .lg {
    --border-radius: theme(borderRadius.lg);
  }

  .xl {
    --border-radius: theme(borderRadius.xl);
  }

  .xll {
    --border-radius: theme(borderRadius.2xl);
  }

  .xlll {
    --border-radius: theme(borderRadius.3xl);
  }

  .full {
    --border-radius: 9999px;
  }

  .white {
    --gradient: theme(colors.brand.white);
    --border-color: theme(colors.brand.white / 15%);
    --glow-color: theme(colors.brand.white / 45%);
  }

  .red {
    --gradient: theme(colors.brand.red);
    --border-color: theme(colors.brand.red / 20%);
    --glow-color: theme(colors.brand.red / 45%);
  }

  .blue {
    --gradient: theme(colors.brand.blue);
    --border-color: theme(colors.brand.blue / 20%);
    --glow-color: theme(colors.brand.blue / 45%);
  }

  .green {
    --gradient: theme(colors.brand.green);
    --border-color: theme(colors.brand.green / 20%);
    --glow-color: theme(colors.brand.green / 45%);
  }

  .yellow {
    --gradient: theme(colors.brand.yellow);
    --border-color: theme(colors.brand.yellow / 20%);
    --glow-color: theme(colors.brand.yellow / 45%);
  }

  .orange {
    --gradient: theme(colors.brand.light-orange);
    --border-color: theme(colors.brand.light-orange / 20%);
    --glow-color: theme(colors.brand.light-orange / 45%);
  }

  .purple {
    --gradient: theme(colors.brand.light-purple);
    --border-color: theme(colors.brand.light-purple / 20%);
    --glow-color: theme(colors.brand.light-purple / 45%);
  }

  .cyan {
    --gradient: theme(colors.brand.light-cyan);
    --border-color: theme(colors.brand.light-cyan / 20%);
    --glow-color: theme(colors.brand.light-cyan / 45%);
  }

  .glow-container {
    --active: 0.15;
    --start: 0;
    border-radius: var(--border-radius);
    border: 1px solid var(--border-color);
    position: relative;
  }

  .glow-container:is(:hover, :focus-visible) {
    z-index: 2;
  }

  .glow-container .glows {
    pointer-events: none;
    position: absolute;
    inset: 0;
    filter: blur(calc(var(--blur) * 1px));
  }

  .glow-container .glows::after,
  .glow-container .glows::before {
    --alpha: 0;
    content: "";
    background: var(--gradient);
    background-attachment: fixed;
    position: absolute;
    inset: -5px;
    border: 10px solid transparent;
    border-radius: var(--border-radius);
    mask: linear-gradient(#0000, #0000),
      conic-gradient(
        from calc((var(--start) - (var(--spread) * 0.5)) * 1deg),
        #000 0deg,
        var(--gradient),
        #0000 calc(var(--spread) * 1deg)
      );
    mask-composite: intersect;
    opacity: var(--active);
    transition: opacity 1s;
  }

  .glow-container::before {
    position: absolute;
    inset: 0;
    border: var(--border-width) solid transparent;
    content: "";
    border-radius: var(--border-radius);
    pointer-events: none;
    background: var(--glow-color);
    background-attachment: fixed;
    border-radius: var(--border-radius);
    mask: linear-gradient(#0000, #0000),
      conic-gradient(
        from
          calc(
            ((var(--start) + (var(--spread) * 0.25)) - (var(--spread) * 1.5)) *
              1deg
          ),
        hsl(0 0% 100% / 0.15) 0deg,
        var(--gradient),
        hsl(0 0% 100% / 0.15) calc(var(--spread) * 2.5deg)
      );
    mask-clip: padding-box, border-box;
    mask-composite: intersect;
    opacity: var(--active);
    transition: opacity 1s;
  }

  .glow-container::after {
    --bg-size: 100%;
    content: "";
    pointer-events: none;
    position: absolute;
    background: var(--gradient);
    background-attachment: fixed;
    border-radius: var(--border-radius);
    opacity: var(--active, 0);
    transition: opacity 1s;
    --alpha: 0;
    inset: 0;
    border: var(--border-width) solid transparent;
    mask: linear-gradient(#0000, #0000),
      conic-gradient(
        from
          calc(
            ((var(--start) + (var(--spread) * 0.25)) - (var(--spread) * 0.5)) *
              1deg
          ),
        #0000 0deg,
        var(--gradient),
        #0000 calc(var(--spread) * 0.5deg)
      );
    filter: brightness(1.5);
    mask-clip: padding-box, border-box;
    mask-composite: intersect;
  }

  .white-border {
    border: 2px solid white;
    border-radius: var(--border-radius);
  }
</style>

<!-- JS -->
<script>
  const GLOW_CONTAINERS = document.querySelectorAll(
    ".glow-container",
  ) as NodeListOf<HTMLElement>;

  const CONFIG = {
    proximity: 40,
    spread: 80,
    blur: 20,
    gap: 32,
    vertical: false,
    opacity: 0,
  };

  const UPDATE = (event: MouseEvent) => {
    // get the angle based on the center point of the card and pointer position
    // Check the card against the proximity and then start updating
    for (const glowContainer of GLOW_CONTAINERS) {
      const containerBounds = glowContainer.getBoundingClientRect();
      // Get distance between pointer and outerbounds of card
      if (
        event?.x > containerBounds.left - CONFIG.proximity &&
        event?.x <
          containerBounds.left + containerBounds.width + CONFIG.proximity &&
        event?.y > containerBounds.top - CONFIG.proximity &&
        event?.y <
          containerBounds.top + containerBounds.height + CONFIG.proximity
      ) {
        // If within proximity set the active opacity
        glowContainer.style.setProperty("--active", "1");
      } else {
        glowContainer.style.setProperty("--active", CONFIG.opacity + "");
      }
      const CARD_CENTER = [
        containerBounds.left + containerBounds.width * 0.5,
        containerBounds.top + containerBounds.height * 0.5,
      ];
      let ANGLE =
        (Math.atan2(event?.y - CARD_CENTER[1], event?.x - CARD_CENTER[0]) *
          180) /
        Math.PI;
      ANGLE = ANGLE < 0 ? ANGLE + 360 : ANGLE;
      glowContainer.style.setProperty("--start", ANGLE + 90 + "");
    }
  };

  document.body.addEventListener("mousemove", UPDATE);

  // @ts-expect-error que ladilla
  UPDATE();
</script>

<script>
  const GLOW_CONTAINERS = document.querySelectorAll(
    ".glow-container",
  ) as NodeListOf<HTMLElement>;

  const darkSchemeMediaQuery = window.matchMedia(
    "(prefers-color-scheme: dark)",
  );

  const handleDarkModeChange = (event: MediaQueryListEvent | boolean) => {
    const isDarkMode = typeof event === "boolean" ? event : event.matches;

    GLOW_CONTAINERS.forEach((glowContainer) => {
      glowContainer.classList.toggle("glow-container", isDarkMode);
      glowContainer.classList.toggle("white-border", !isDarkMode);
    });
  };

  handleDarkModeChange(darkSchemeMediaQuery.matches);

  darkSchemeMediaQuery.addEventListener("change", handleDarkModeChange);
</script>
